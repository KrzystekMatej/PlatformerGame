using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class Invulnerability : MonoBehaviour
{
    [SerializeField]
    private float duration = 0.5f;
    [SerializeField]
    private bool disableAttacking = true;

    private SpriteRenderer spriteRenderer;
    public bool IsActive { get; private set; }

    private void Awake()
    {
        spriteRenderer = GetComponentInChildren<SpriteRenderer>();
    }

    public IEnumerator Run(StateFactory factory)
    {
        State attackState = factory.GetState(StateType.Attack);
        if (disableAttacking) factory.SetState(StateType.Attack, null);

        const float flashSpeed = 0.1f;

        int flashCount = Mathf.RoundToInt(duration / flashSpeed);
        int colorFlag;
        IsActive = true;

        for (int i = 0; i < flashCount; i++)
        {
            colorFlag = i % 2 == 0 ? 1 : 0;
            spriteRenderer.material.SetInt("_SetSolidColor", colorFlag);
            yield return new WaitForSeconds(flashSpeed);
        }

        spriteRenderer.material.SetInt("_SetSolidColor", 0);
        factory.SetState(StateType.Attack, attackState);
        IsActive = false;
    }
}
